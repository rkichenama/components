{
  "components": {
    "Canvas": {
      "description": "A component wrapper for the html5 Canvas tag. It will render a canvas as the root element, processing passed props to render image and/or animation. To assist in this, there are helper functions also exported.\n\n### Animation function\nThe functions passed at props to this component will receive each named prop given to the component as well as an additional argument `context`. This last argument is a convenience wrapper for the context2d of the rendered canvas that provides chainable functions for drawing. The aim is to enable creating an array of functions that draw layers on the canvas.\n\n### Helpers\n* Clear\n* FilledRect\n* BorderedRect\n* Rect\n* Arc\n* Circle\n",
      "displayName": "Canvas",
      "methods": [
        {
          "name": "setCanvas",
          "docblock": "remember the rendered canvas tag for later processing\n\ndoes not check to see if the canvas is part of this component, however is called on each render.\n\n@param {HTMLElement} canvas - ref to the rendered canvas tag",
          "modifiers": [],
          "params": [
            {
              "name": "canvas",
              "description": "ref to the rendered canvas tag",
              "type": {
                "name": "HTMLElement"
              }
            }
          ],
          "returns": null,
          "description": "remember the rendered canvas tag for later processing\n\ndoes not check to see if the canvas is part of this component, however is called on each render."
        },
        {
          "name": "stopAnimating",
          "docblock": "cause whatever animation currently in progress to stop asap",
          "modifiers": [],
          "params": [],
          "returns": null,
          "description": "cause whatever animation currently in progress to stop asap"
        },
        {
          "name": "animate",
          "docblock": "trigger animating of the scene",
          "modifiers": [],
          "params": [],
          "returns": null,
          "description": "trigger animating of the scene"
        }
      ],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "func"
            }
          },
          "required": false,
          "description": "An array of functions that will draw within the canvas intially after render. See __animation function__ for details",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "name": "scene"
        },
        {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "func"
            }
          },
          "required": false,
          "description": "An array of functions that will draw within the canvas in a looping sequence where each slide function is drawn after the complete scene array. See __animation function__ for details",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "name": "sequence"
        },
        {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "300",
            "computed": false
          },
          "name": "width"
        },
        {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "300",
            "computed": false
          },
          "name": "height"
        },
        {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "name": "style"
        }
      ],
      "filename": "src/Canvas/Canvas.jsx"
    },
    "Card": {
      "description": "One of those swt where you have a card on a page and, on click, it flips in 3d to a hidden back side",
      "displayName": "Card",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "the structure of this component requires at least 1 child, no more than 2",
          "name": "children"
        },
        {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "callback to notify parent, which decides on whether the `flipped` prop should change",
          "defaultValue": {
            "value": "() => { }",
            "computed": false
          },
          "name": "onClick"
        },
        {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "the current state, whether the front is shown (`false`) or the back (`true`)",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "name": "flipped"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        }
      ],
      "filename": "src/Card/Card.jsx"
    },
    "ClickDecorator": {
      "description": "A render prop HOC that provides a click event handler to iteratively cycle through a list of values,\nmoving the previous value to the end of the list, allowing for seemingly endless function.",
      "displayName": "ClickDecorator",
      "methods": [
        {
          "name": "handleClickEvent",
          "docblock": "internal click event handler\n@param {Event} evt - a click event",
          "modifiers": [],
          "params": [
            {
              "name": "evt",
              "description": "a click event",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null,
          "description": "internal click event handler"
        }
      ],
      "props": [
        {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "the function that will be passed the current value when changed",
          "name": "component"
        },
        {
          "type": {
            "name": "array"
          },
          "required": true,
          "description": "the list of values to loop through",
          "name": "values"
        }
      ],
      "filename": "src/ClickDecorator/ClickDecorator.jsx"
    },
    "Cube": {
      "description": "A card type component that has 6 faces and rotates about the shared center via given prop and has an onClick event to notify parent to take action. The animation is handled via css transforms with a perspective of the viewport and seems to handle stuttering well.",
      "displayName": "Cube",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "",
          "name": "children"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'front'",
                "computed": false
              },
              {
                "value": "'back'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "one of the enum values, either in Cube.Faces or as a static named constant off Cube",
          "defaultValue": {
            "value": "'front'",
            "computed": false
          },
          "name": "face"
        },
        {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "function that is triggered on click to nofiy that action can be taken",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "name": "onClick"
        }
      ],
      "filename": "src/Cube/Cube.jsx"
    },
    "GitHubProfile": {
      "description": "This component was initially born out of an attempt to use the Github GraphQL api to pull user profile data. With the richness of v4, I had hoped to pull info like current PRs, any issues raised or answered, along with commit history.\n\nUnforutnately, not only would v4 require oauth, but creating the query seemed beyond what I could straigtforwardly do. That said, I settled for the v3 public version that is rate limited and gives extremely basic information.\n",
      "displayName": "GitHubProfile",
      "methods": [
        {
          "name": "fetchUserInfo",
          "docblock": "Using `props.username`, will retrieve github info using v3 API\n@param {Object} props - component props\n@param {string} props.username - the github username to pull",
          "modifiers": [
            "async"
          ],
          "params": [
            {
              "name": "props",
              "description": "component props",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null,
          "description": "Using `props.username`, will retrieve github info using v3 API"
        }
      ],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "user on github whose profile information to display",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "username"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "name": "style"
        }
      ],
      "filename": "src/GitHubProfile/GitHubProfile.jsx"
    },
    "Info": {
      "description": "Intended as a replacement for the Details / Summary pair, duplicating the ease of a cross browser collapsible element.\n\nTODO: rewrite as a render prop",
      "displayName": "Info",
      "methods": [
        {
          "name": "preloadOpenState",
          "docblock": "if an open prop is given, use it to load into state\n@param {Object} props - component props\n@param {bool} props.open - open state for section",
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "description": "component props",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null,
          "description": "if an open prop is given, use it to load into state"
        },
        {
          "name": "handleToggleClick",
          "docblock": "internally handle clicking on the header\n@param {Event} evt - a click event",
          "modifiers": [],
          "params": [
            {
              "name": "evt",
              "description": "a click event",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null,
          "description": "internally handle clicking on the header"
        }
      ],
      "props": [
        {
          "type": {
            "name": "custom",
            "raw": "renderableType"
          },
          "required": false,
          "description": "the replacement for `summary` tag, should accept a string or nodes",
          "name": "title"
        },
        {
          "type": {
            "name": "custom",
            "raw": "renderableType"
          },
          "required": false,
          "description": "",
          "name": "children"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "toggles whether the caret should be on the right if present and/or true",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "name": "right"
        },
        {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "allows pre-setting the open state.\n\ncould be used to change state programmatically",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "name": "open"
        },
        {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "callback triggered after open state has changed.",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "name": "onStateChanged"
        }
      ],
      "filename": "src/Info/Info.jsx"
    },
    "ProgressBar": {
      "description": "A simple progress bar that moves from left to right when given a value between\n0 and 1. Basically, most of the css can be overriden besides the props to set colors.\nOne line of text is expected for the status, which will be center white with black outline.",
      "displayName": "ProgressBar",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "color the filled progress bar should be",
          "defaultValue": {
            "value": "'green'",
            "computed": false
          },
          "name": "barColor"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "name": "title"
        },
        {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "the percentage to display, given as a positive value `[0, 1]`",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "name": "value"
        },
        {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "",
          "name": "children"
        }
      ],
      "filename": "src/ProgressBar/ProgressBar.jsx"
    },
    "Spinner": {
      "description": "A simple spinner that uses a font based animation that scrolls vertically through an infinite transform animation. It should be used as a wrapper for a component which will block the UI if the test returns true. The actual spinner is an offset from the top of the rendered component with a minimum height of double the font size.",
      "displayName": "Spinner",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "name": "blockingClass"
        },
        {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "",
          "name": "for"
        },
        {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "function that, if result is true, will show spinner",
          "name": "test"
        }
      ],
      "filename": "src/Spinner/Spinner.jsx"
    },
    "StateDecorator": {
      "description": "This render prop HOC iterates over a list of values, pushing the current to the given component prop\nand moving it to the end of the list, endlessly looping with no user interaction.",
      "displayName": "StateDecorator",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "the function that will be passed the current value when changed",
          "name": "component"
        },
        {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "the period to wait, in ms, before changing the value",
          "defaultValue": {
            "value": "5000",
            "computed": false
          },
          "name": "delay"
        },
        {
          "type": {
            "name": "array"
          },
          "required": true,
          "description": "the list of values to loop through",
          "name": "values"
        }
      ],
      "filename": "src/StateDecorator/StateDecorator.jsx"
    },
    "Toggle": {
      "description": "A simple toggle component.\n\nIn order to customize, you can use CSS variables below to change colors and timings\n* `--toggle-track-padding` - the vertical padding of the track, 4px default\n* `--toggle-animation-duration` - the time of the slide transition, 750ms default\n* `--toggle-switch-color` - color of the disc in the center and the border around the track, white default\n* `--toggle-track-color` - color of the track the disc travels on, 20% black default",
      "displayName": "Toggle",
      "methods": [
        {
          "name": "preloadValue",
          "docblock": "use the value prop to load into statepreloadValue\n@param {Object} props - component props\n@param {bool} props.value - toggle state",
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "description": "component props",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null,
          "description": "use the value prop to load into statepreloadValue"
        },
        {
          "name": "handleClick",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": [
        {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "the value, true or false, of the underlying state",
          "name": "value"
        },
        {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "function that is notified when the sttae changes",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "name": "onValueChange"
        }
      ],
      "filename": "src/Toggle/Toggle.jsx"
    }
  },
  "keys": [
    "Canvas",
    "Card",
    "ClickDecorator",
    "Cube",
    "GitHubProfile",
    "Info",
    "ProgressBar",
    "Spinner",
    "StateDecorator",
    "Toggle"
  ]
}