{
  "components": {
    "Canvas": {
      "description": "A canvas component that I made\n* stupidly",
      "displayName": "Canvas",
      "methods": [
        {
          "name": "animate",
          "docblock": "trigger animating of the scene\n\n@param {string} a - firey\n@returns {string} - something to write home about",
          "modifiers": [],
          "params": [
            {
              "name": "a",
              "description": "firey",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "description": "something to write home about",
            "type": {
              "name": "string"
            }
          },
          "description": "trigger animating of the scene"
        }
      ],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "func"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "name": "scene"
        },
        {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "func"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "name": "sequence"
        }
      ],
      "filename": "src/Canvas/Canvas.jsx"
    },
    "Card": {
      "description": "One of those swt where you have a card on a page and, on click, it flips in 3d to a hidden back side",
      "displayName": "Card",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "the structure of this component requires at least 1 child, no more than 2",
          "name": "children"
        },
        {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "callback to notify parent, which decides on whether the `flipped` prop should change",
          "defaultValue": {
            "value": "() => { }",
            "computed": false
          },
          "name": "onClick"
        },
        {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "the current state, whether the front is shown (`false`) or the back (`true`)",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "name": "flipped"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        }
      ],
      "filename": "src/Card/Card.jsx"
    },
    "ClickDecorator": {
      "description": "A render prop HOC that provides a click event handler to iteratively cycle through a list of values,\nmoving the previous value to the end of the list, allowing for seemingly endless function.",
      "displayName": "ClickDecorator",
      "methods": [
        {
          "name": "handleClickEvent",
          "docblock": "internal click event handler\n@param {Event} evt - a click event",
          "modifiers": [],
          "params": [
            {
              "name": "evt",
              "description": "a click event",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null,
          "description": "internal click event handler"
        }
      ],
      "props": [
        {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "the function that will be passed the current value when changed",
          "name": "component"
        },
        {
          "type": {
            "name": "array"
          },
          "required": true,
          "description": "the list of values to loop through",
          "name": "values"
        }
      ],
      "filename": "src/ClickDecorator/ClickDecorator.jsx"
    },
    "Cube": {
      "description": "A card type component that has 6 faces and rotates about the shared center via given prop and has an onClick event to notify parent to take action. The animation is handled via css transforms with a perspective of the viewport and seems to handle stuttering well.",
      "displayName": "Cube",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "",
          "name": "children"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'front'",
                "computed": false
              },
              {
                "value": "'back'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "one of the enum values, either in Cube.Faces or as a static named constant off Cube",
          "defaultValue": {
            "value": "'front'",
            "computed": false
          },
          "name": "face"
        },
        {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "function that is triggered on click to nofiy that action can be taken",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "name": "onClick"
        }
      ],
      "filename": "src/Cube/Cube.jsx"
    },
    "GitHubProfile": {
      "description": "This component was initially born out of an attempt to use the Github GraphQL api to pull user profile data. With the richness of v4, I had hoped to pull info like current PRs, any issues raised or answered, along with commit history.\n\nUnforutnately, not only would v4 require oauth, but creating the query seemed beyond what I could straigtforwardly do. That said, I settled for the v3 public version that is rate limited and gives extremely basic information.\n",
      "displayName": "GitHubProfile",
      "methods": [
        {
          "name": "fetchUserInfo",
          "docblock": "Using `props.username`, will retrieve github info using v3 API\n@param {Object} props - component props\n@param {string} props.username - the github username to pull",
          "modifiers": [
            "async"
          ],
          "params": [
            {
              "name": "props",
              "description": "component props",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null,
          "description": "Using `props.username`, will retrieve github info using v3 API"
        }
      ],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "user on github whose profile information to display",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "username"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "name": "style"
        }
      ],
      "filename": "src/GitHubProfile/GitHubProfile.jsx"
    },
    "ProgressBar": {
      "description": "A simple progress bar that moves from left to right when given a value between\n0 and 1. Basically, most of the css can be overriden besides the props to set colors.\nOne line of text is expected for the status, which will be center white with black outline.",
      "displayName": "ProgressBar",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "color the filled progress bar should be",
          "defaultValue": {
            "value": "'green'",
            "computed": false
          },
          "name": "barColor"
        },
        {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "the percentage to display, given as a positive value `[0, 1]`",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "name": "value"
        }
      ],
      "filename": "src/ProgressBar/ProgressBar.jsx"
    },
    "StateDecorator": {
      "description": "This render prop HOC iterates over a list of values, pushing the current to the given component prop\nand moving it to the end of the list, endlessly looping with no user interaction.",
      "displayName": "StateDecorator",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "the function that will be passed the current value when changed",
          "name": "component"
        },
        {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "the period to wait, in ms, before changing the value",
          "defaultValue": {
            "value": "5000",
            "computed": false
          },
          "name": "delay"
        },
        {
          "type": {
            "name": "array"
          },
          "required": true,
          "description": "the list of values to loop through",
          "name": "values"
        }
      ],
      "filename": "src/StateDecorator/StateDecorator.jsx"
    }
  },
  "keys": [
    "Canvas",
    "Card",
    "ClickDecorator",
    "Cube",
    "GitHubProfile",
    "ProgressBar",
    "StateDecorator"
  ]
}