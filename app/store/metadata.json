{
  "components": {
    "Canvas": {
      "description": "A canvas component that I made\n* stupidly",
      "displayName": "Canvas",
      "methods": [
        {
          "name": "animate",
          "docblock": "trigger animating of the scene\n\n@param {string} a - firey\n@returns {string} - something to write home about",
          "modifiers": [],
          "params": [
            {
              "name": "a",
              "description": "firey",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "description": "something to write home about",
            "type": {
              "name": "string"
            }
          },
          "description": "trigger animating of the scene"
        }
      ],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "func"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "name": "scene"
        },
        {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "func"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "name": "sequence"
        }
      ],
      "filename": "src/Canvas/Canvas.jsx"
    },
    "Card": {
      "description": "One of those swt where you have a card on a page and, on click, it flips in 3d to a hidden back side",
      "displayName": "Card",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "the structure of this component requires at least 1 child, no more than 2",
          "name": "children"
        },
        {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "callback to notify parent, which decides on whether the `flipped` prop should change",
          "defaultValue": {
            "value": "() => { }",
            "computed": false
          },
          "name": "onClick"
        },
        {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "the current state, whether the front is shown (`false`) or the back (`true`)",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "name": "flipped"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        }
      ],
      "filename": "src/Card/Card.jsx"
    },
    "Cube": {
      "description": "",
      "displayName": "Cube",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "",
          "name": "children"
        },
        {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "name": "onClick"
        },
        {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'front'",
                "computed": false
              },
              {
                "value": "'back'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'front'",
            "computed": false
          },
          "name": "face"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        }
      ],
      "filename": "src/Cube/Cube.jsx"
    },
    "GitHubProfile": {
      "description": "This component was initially born out of an attempt to use the Github GraphQL api to pull user profile data. With the richness of v4, I had hoped to pull info like current PRs, any issues raised or answered, along with commit history.\n\nUnforutnately, not only would v4 require oauth, but creating the query seemed beyond what I could straigtforwardly do. That said, I settled for the v3 public version that is rate limited and gives extremely basic information.\n",
      "displayName": "GitHubProfile",
      "methods": [
        {
          "name": "fetchUserInfo",
          "docblock": "Using `props.username`, will retrieve github info using v3 API\n@param {Object} props - component props\n@param {string} {username} - the github username to pull\n@return {Object} sets new state",
          "modifiers": [
            "async"
          ],
          "params": [
            {
              "name": "props",
              "description": "component props",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": "sets new state",
            "type": {
              "name": "Object"
            }
          },
          "description": "Using `props.username`, will retrieve github info using v3 API"
        }
      ],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "user on github whose profile information to display",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "username"
        },
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "name": "className"
        },
        {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "name": "style"
        }
      ],
      "filename": "src/GitHubProfile/GitHubProfile.jsx"
    },
    "ProgressBar": {
      "description": "A simple progress bar that moves from left to right when given a value between\n0 and 1. Basically, most of the css can be overriden besides the props to set colors.\nOne line of text is expected for the status, which will be center white with black outline.",
      "displayName": "ProgressBar",
      "methods": [],
      "props": [
        {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "color the filled progress bar should be",
          "defaultValue": {
            "value": "'green'",
            "computed": false
          },
          "name": "barColor"
        },
        {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "the percentage to display, given as a positive value `[0, 1]`",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "name": "value"
        }
      ],
      "filename": "src/ProgressBar/ProgressBar.jsx"
    }
  },
  "keys": [
    "Canvas",
    "Card",
    "Cube",
    "GitHubProfile",
    "ProgressBar"
  ]
}